buildscript {
    ext {
        appName = "colony"
        gdxVersion = '1.13.5'
        gdxAiVersion = '1.8.2'
        jUnitVersion = '4.13.2'
        mockitoVersion = '5.16.1'
        artemisVersion = '2.3.0'
        checkstyleVersion = '10.25.0'
        slf4jVersion = '2.0.17'
        logbackVersion = '1.5.18'
        typesafeConfigVersion = '1.4.3'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        google()
    }
} 

plugins {
    id 'com.diffplug.spotless' version '7.0.4' apply false
}


import org.gradle.process.ExecOperations
import org.gradle.process.ExecSpec
import org.gradle.api.tasks.javadoc.Javadoc

def getGitVersion() {
    def stdout = new ByteArrayOutputStream()
    def execOps = services.get(ExecOperations)
    execOps.exec { ExecSpec spec ->
        spec.commandLine 'git', 'describe', '--tags', '--abbrev=0'
        spec.standardOutput = stdout
        spec.ignoreExitValue = true
    }
    def ver = stdout.toString().trim()
    if (ver.isEmpty()) {
        ver = 'dev'
    }
    return ver
}

ext.applicationVersion = getGitVersion()

allprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'checkstyle'
    apply plugin: 'com.diffplug.spotless'

    repositories {
        mavenLocal()
        mavenCentral()
        google()
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
    }

    checkstyle {
        toolVersion = checkstyleVersion
    }

    spotless {
        java {
            target 'src/**/*.java'
            leadingTabsToSpaces(4)
            trimTrailingWhitespace()
            endWithNewline()
        }
    }

    tasks.register('spotless') {
        group = 'verification'
        dependsOn 'spotlessApply'
    }

    tasks.withType(Jar).configureEach {
        manifest.attributes('Implementation-Version': rootProject.applicationVersion)
    }
}

tasks.register('aggregateJavadoc', Javadoc) {
    group = 'documentation'
    description = 'Generates aggregated Javadoc for all modules.'
    destinationDir = file("$buildDir/docs/javadoc")
    subprojects.each { proj ->
        dependsOn proj.tasks.named('javadoc')
        source proj.sourceSets.main.allJava
        classpath += proj.sourceSets.main.compileClasspath
    }
    options.encoding = 'UTF-8'
    failOnError = false
}
